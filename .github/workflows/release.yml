name: 发布版本

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v2.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    name: 构建和发布
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ 获取版本信息
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 版本: $VERSION"

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 安装构建依赖
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🔨 构建分发包
      continue-on-error: true
      run: |
        echo "🔨 构建Python包..."
        python -m build || echo "⚠️ Python包构建失败，但继续创建归档"

        echo "📦 创建发布归档..."
        tar -czf wxread-${{ steps.version.outputs.VERSION }}.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='logs' \
          --exclude='tests' \
          . || echo "⚠️ 归档创建失败"

    - name: 🐳 设置Docker环境
      uses: docker/setup-buildx-action@v3

    - name: 🔑 登录Docker Hub
      if: github.event_name == 'push' && secrets.DOCKER_USERNAME != ''
      continue-on-error: true
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🐳 构建并推送Docker镜像
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name == 'push' && secrets.DOCKER_USERNAME != '' }}
        tags: |
          wxread/wxread:latest
          wxread/wxread:${{ steps.version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.run_id }}
          VERSION=${{ steps.version.outputs.VERSION }}

    - name: 📝 生成更新日志
      id: changelog
      run: |
        echo "📝 生成更新日志..."
        cat > CHANGELOG.md << 'EOF'
        # 更新日志 ${{ steps.version.outputs.VERSION }}
        
        ## 🚀 新功能
        - 全面重构为模块化架构
        - 新增配置管理系统
        - 优化推送通知机制
        - 改进错误处理和重试机制
        
        ## 🔧 改进
        - 提升代码可读性和可维护性
        - 增强安全性和稳定性
        - 优化Docker部署配置
        - 改进GitHub Actions工作流
        
        ## 🐛 修复
        - 修复配置验证问题
        - 改进网络请求处理
        - 优化日志输出格式
        
        ## 📦 部署
        
        ### Docker部署
        ```bash
        docker run -d --name wxread \
          -e WXREAD_CURL_BASH="your_curl_bash" \
          -e PUSH_METHOD="pushplus" \
          -e PUSHPLUS_TOKEN="your_token" \
          -v ./logs:/app/logs \
          wxread/wxread:${{ steps.version.outputs.VERSION }}
        ```
        
        ### 源码部署
        ```bash
        git clone https://github.com/your-repo/wxread.git
        cd wxread
        pip install -r requirements.txt
        python main.py
        ```
        EOF

    - name: 🚀 创建GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push'
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: 微信读书自动阅读工具 ${{ steps.version.outputs.VERSION }}
        body_path: CHANGELOG.md
        files: |
          wxread-${{ steps.version.outputs.VERSION }}.tar.gz
          requirements.txt
          docker-compose.yml
        draft: false
        prerelease: false

    - name: 📢 发布通知
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "::notice title=发布成功::✅ 版本 ${{ steps.version.outputs.VERSION }} 发布成功"
        else
          echo "::error title=发布失败::❌ 版本 ${{ steps.version.outputs.VERSION }} 发布失败"
        fi
