name: 微信读书自动阅读

on:
  schedule:
    # 凌晨任务：北京时间每天 01:00（UTC 前一天 17:00）
    - cron: '0 17 * * *'
    # 早间任务：北京时间每天 05:00（UTC 前一天 21:00）
    #- cron: '0 21 * * *'
    # 午间任务：北京时间每天 11:40（UTC 03:40）
    #- cron: '40 3 * * *'
    # 晚间任务：北京时间每天 22:00（UTC 14:00）
    #- cron: '0 14 * * *'
  workflow_dispatch:  # 手动触发
    inputs:
      read_minutes:
        description: '阅读时长（分钟）'
        required: false
        default: '30'
        type: choice
        options:
          - '20'
          - '30'
          - '40'
          - '50'
          - '60'
      log_level:
        description: '日志级别'
        required: false
        default: 'INFO'
        type: choice
        options:
          - 'DEBUG'
          - 'INFO'
          - 'WARNING'
          - 'ERROR'
      use_legacy:
        description: '使用旧版本逻辑'
        required: false
        default: false
        type: boolean

# 设置权限
permissions:
  contents: read
  actions: read

jobs:
  wxread:
    name: 微信读书自动阅读
    runs-on: ubuntu-latest
    environment: AutoRead
    timeout-minutes: 120  # 设置超时时间

    # 并发控制
    concurrency:
      group: wxread-${{ github.ref }}
      cancel-in-progress: false

    steps:
    - name: 🚀 开始任务
      run: |
        echo "::notice title=任务开始::微信读书自动阅读任务开始执行"
        echo "📅 执行时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🖥️  运行环境: ${{ runner.os }} ${{ runner.arch }}"

    - name: 🌐 配置网络环境
      run: |
        echo "🔧 配置DNS服务器..."
        echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
        echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
        echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf

        echo "🌐 测试网络连接..."
        ping -c 3 weread.qq.com || echo "⚠️ 微信读书服务器连接测试失败"

    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # 浅克隆以提高速度

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'  # 启用pip缓存

    - name: 📦 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python3.11/site-packages
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🎲 生成阅读参数
      id: reading_params
      run: |
        # 优先使用手动输入的参数，否则生成随机值
        if [ "${{ github.event.inputs.read_minutes }}" != "" ]; then
          MINUTES=${{ github.event.inputs.read_minutes }}
          READ_NUM=$((MINUTES * 2))
          echo "📝 使用手动设置: ${MINUTES}分钟 (${READ_NUM}次)"
        else
          # 生成30-60分钟对应的随机次数（60-120次）
          READ_NUM=$((RANDOM % 61 + 60))
          MINUTES=$((READ_NUM / 2))
          echo "🎲 随机生成: ${MINUTES}分钟 (${READ_NUM}次)"
        fi

        echo "READ_NUM=$READ_NUM" >> $GITHUB_OUTPUT
        echo "MINUTES=$MINUTES" >> $GITHUB_OUTPUT
        echo "::notice title=阅读参数::预计阅读时长 ${MINUTES} 分钟"

    - name: 🔧 安装依赖
      run: |
        echo "📦 升级pip..."
        python -m pip install --upgrade pip setuptools wheel

        echo "📋 安装项目依赖..."
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          # 兼容旧版本的依赖安装
          pip install certifi==2024.8.30 charset-normalizer==3.4.0 idna==3.10 requests==2.32.3 urllib3==2.2.3
        fi

        echo "✅ 依赖安装完成"
        pip list

    - name: 🔍 环境检查
      run: |
        echo "🔍 检查Python环境..."
        python --version
        pip --version

        echo "📁 检查项目文件..."
        ls -la

        echo "🧪 测试模块导入..."
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            from src.utils.exceptions import WxReadError
            print('✅ 新版本模块可用')
        except ImportError:
            print('⚠️ 新版本模块不可用，将使用兼容模式')
        "

    - name: 📚 执行阅读任务
      id: reading_task
      env:
        # 微信读书配置
        WXREAD_CURL_BASH: ${{ secrets.WXREAD_CURL_BASH }}
        READ_NUM: ${{ steps.reading_params.outputs.READ_NUM }}

        # 推送配置
        PUSH_METHOD: ${{ secrets.PUSH_METHOD }}
        PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}
        WXPUSHER_SPT: ${{ secrets.WXPUSHER_SPT }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

        # 网络代理（可选）
        http_proxy: ${{ secrets.HTTP_PROXY }}
        https_proxy: ${{ secrets.HTTPS_PROXY }}

        # 日志配置
        LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}

      run: |
        echo "📚 开始执行微信读书任务..."
        echo "⏱️  预计阅读时长: ${{ steps.reading_params.outputs.MINUTES }}分钟"
        echo "🔧 日志级别: ${LOG_LEVEL}"

        # 选择执行模式
        if [ "${{ github.event.inputs.use_legacy }}" = "true" ]; then
          echo "🔄 使用旧版本逻辑..."
          python main.py --legacy
        else
          echo "🚀 使用新版本逻辑..."
          python main.py --log-level "${LOG_LEVEL}"
        fi

    - name: 📊 任务结果
      if: always()
      run: |
        if [ "${{ steps.reading_task.outcome }}" = "success" ]; then
          echo "::notice title=任务完成::✅ 微信读书任务执行成功"
        else
          echo "::error title=任务失败::❌ 微信读书任务执行失败"
        fi

        echo "📈 任务统计:"
        echo "- 执行时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "- 目标时长: ${{ steps.reading_params.outputs.MINUTES }}分钟"
        echo "- 任务状态: ${{ steps.reading_task.outcome }}"

    - name: 🧹 清理缓存
      if: always()
      run: |
        echo "🧹 清理临时文件..."
        rm -rf logs/*.log 2>/dev/null || true
        echo "✅ 清理完成"
